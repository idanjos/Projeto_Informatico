<!DOCTYPE html>
<html lang="en">

<head>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="">
  <meta name="author" content="">

 <link rel="stylesheet" href="/css/bootstrap.css">
  <link rel="stylesheet" href="/js/rickshaw/rickshaw.css">
  <script src="/js/jquery.js"></script>
  <script src="/js/popper.js"></script>
  <script src="/js/bootstrap.js"></script>
  <title>VIRHUS API</title>

  <!-- Custom fonts for this template-->
  <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">

  <!-- Page level plugin CSS-->
  <link href="vendor/datatables/dataTables.bootstrap4.css" rel="stylesheet">

  <!-- Custom styles for this template-->
  <link href="css/sb-admin.css" rel="stylesheet">
<style>
   pre.code {
    background-color: #f6f8fa;
    border-radius: 3px;
    font-size: 85%;
    line-height: 1.45;
    overflow: auto;
    padding: 16px;
}
.fa-circle{
  font-size: 7px;
}

</style>
</head>

<body id="page-top">

  <nav class="navbar navbar-expand navbar-dark bg-dark static-top">

    <a class="navbar-brand mr-1" href="/">VIRHUS</a>

    <button class="btn btn-link btn-sm text-white order-1 order-sm-0" id="sidebarToggle" href="#">
      <i class="fas fa-bars"></i>
    </button>

    <!-- Navbar Search -->
  

<div class="modal fade bd-example-modal-lg" id="myModal"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      ...
    </div>
  </div>
</div>

    <!-- Navbar -->
    

  </nav>

  <div id="wrapper">

    <!-- Sidebar -->
    <ul class="sidebar navbar-nav">
      <li class="nav-item">
        <a class="nav-link" href="/documentation">
          <i class="fas fa-fw fa-tachometer-alt"></i>
          <span>Virhus JS</span>
        </a>
      </li>
     
      <li class="nav-item">
        <a class="nav-link" href="/messaging">
          <i class="fas fa-fw fa-chart-area"></i>
          <span>Messaging</span></a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/api">
          <i class="fas fa-fw fa-table"></i>
          <span>Test it yourself!</span></a>
      </li>
    </ul>

    <div id="content-wrapper">

      <div class="container-fluid">

        <!-- Breadcrumbs-->
  

        <!-- Page Content -->
        <h1>Virhus API</h1>
        <hr>
        <p>Virhus API uses both Websockets and Http Request to show flexibility and support to streamed data. All requests will need a token to prove authenticity. Here's an example in Javascript how our API should be used.</p><br>
        <h1>Requirements</h1>
        <div class ="code">
          <a href="/js/jquery.js">Jquery JS</a><br>
          <a href="/socket.io/socket.io.js">Socket.IO JS</a><br>
          <a href="/js/virhus_api.js">Virhus API JS</a><br>
        
        </div>
        <br>
        <h1>Virhus JS</h1>
        <div>
        <pre class="code">
    &lt;script src="/js/jquery.js">&lt;/script&gt;
    &lt;script src="/socket.io/socket.io.js">&lt;/script&gt;
    &lt;script src="/js/virhus_api.js">&lt;/script&gt;
    &lt;script&gt;
      $(document).ready(function(){
          var virhus = new Virhus();
      });
    &lt;/script&gt;
        </pre>
      </div>

      <br>
      <h2>Event:'freq'</h2>
      <div>
        The event 'freq' is emitted when the server is publishing frequency of the following data
        <pre>
          <i class="fas fa-circle"></i> 'data' &lt;string&gt; Frequency
        </pre>
        <pre class="code">
    virhus.on('freq', callback(freq));
        </pre>
      </div>


      <br>
      <h2>Event:'data'</h2>
      <div>
        The event 'data' is emitted when the server is publishing a data chunk.
        <pre>
          <i class="fas fa-circle"></i> 'chunk' &lt;buffer&gt; | &lt;string&gt; | &lt;any&gt;
        </pre>
        <pre class="code">
    virhus.on('data', callback(data));
        </pre>
      </div>

      <br>
      <h2>Event:'close'</h2>
      <div>
        The 'close' event is emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed
        <pre>
        </pre>
        <pre class="code">
    virhus.on('close', callback());
        </pre>
      </div>

      <br>
      <h2>virhus.connect('ip:port','token')</h2>
      <div>
        The virhus.connect() method is used to estabilish a connection to the websocket server. Token is used to authenticate.
        <pre>
          <i class="fas fa-circle"></i> 'ip:port' &lt;string&gt; Address location to WebSocket server
          <i class="fas fa-circle"></i> 'token' &lt;string&gt; Authentication token that can be found <a href="/profile"></a>
          Returns: &lt;string&gt;
        </pre>
        <pre class="code">
    virhus.connect(192.168.160.56:3000, 'token');
        </pre>
      </div>

      <br>
      <h2>virhus.disconnect()</h2>
      <div>
        The virhus.disconnect() method is used to disconnect from the Websocket server.
        <pre>
          Returns: &lt;this&gt;
        </pre>
        <pre class="code">
    virhus.disconnect();
        </pre>
      </div>

      <br>
      <h2>virhus.downloadCSV(file)</h2>
      <div>
        The virhus.downloadCSV() method is used to download a target data file.
        <pre>
          <i class="fas fa-circle"></i> 'file' &lt;string&gt; Target file which ends with ".dat"
          Returns: &lt;this&gt;
        </pre>
        <pre class="code">
    virhus.downloadCSV("file.dat");
        </pre>
      </div>

      <br>
      <h2>virhus.get_config("VirtualHuman",callback)</h2>
      <div>
        The virhus.get_config() method is used to get configuration and records of the target Virtual Human.
        <pre>
          <i class="fas fa-circle"></i> 'VirtualHuman' &lt;string&gt; Target Virtual Human
          <i class="fas fa-circle"></i> callback &lt;function&gt; Params: object{configs: [array], replays:[array]}
          Returns: &lt;this&gt;
        </pre>
        <pre class="code">
    virhus.get_config("Bob",function(data){
        console.log(data)
    })
        </pre>
      </div>

      <br>
      <h2>virhus.get_configs(callback)</h2>
      <div>
        The virhus.get_configs() method is used to get all existing Virtual Humans.
        <pre>
          <i class="fas fa-circle"></i> callback &lt;function&gt; Params: object{configs: [array]}
          Returns: &lt;this&gt;
        </pre>
        <pre class="code">
    virhus.get_configs(function(data){
        console.log(data)
    })
        </pre>
      </div>


       <br>
      <h2>virhus.isConnected()</h2>
      <div>
        The virhus.isConnected() method is used to check if the Websocket connection is still open up.
        <pre>
          Returns: &lt;bool&gt; True If connection is up.
        </pre>
        <pre class="code">
    if(virhus.isConnected()){
      //TODO because connection is up
    }
        </pre>
      </div>


      <br>
      <h2>virhus.requestData('file')</h2>
      <div>
        The virhus.play() method is used to tell the server to continue emitting more data. This function will provoke 'data' event at some point, be sure to implement a callback.
        <pre>
          <i class="fas fa-circle"></i> 'file' &lt;string&gt; Target .dat file
        </pre>
        <pre class="code">
    updater = setInterval(function() {
      virhus.requestData("file.dat");
    }, 1000);
        </pre>
      </div>

      <br>
      <h2>virhus.playRecord('file')</h2>
      <div>
        The virhus.playRecord() method is used to start a file stream from the server. After invoking this method, this class will start emitting events on 'freq', 'data' and 'close'. Be sure to create callbacks to these functions.
        <pre>
          <i class="fas fa-circle"></i> 'file' &lt;string&gt; Target .dat file
        </pre>
        <pre class="code">
    if(virhus.isConnected()){
      virhus.playRecord("file.dat");
    }
        </pre>
      </div>

      <br>
      <h2>virhus.play('virtualHuman')</h2>
      <div>
        <b>The virhus.play() is not yet implemented, sorry!</b><br>
        The virhus.play() method is used to start an interactive stream from the server. After invoking this method, this class will start emitting events on 'freq', 'data' and 'close'. Be sure to create callbacks to these functions.
        <pre>
          <i class="fas fa-circle"></i> 'virtual Human' &lt;string&gt; Target Virtual Human
        </pre>
        <pre class="code">
    if(virhus.isConnected()){
      virhus.play("Bob");
    }
        </pre>
      </div>

      <br>
      <h2>virhus.stop()</h2>
      <div>
        <b>The virhus.stop() is not yet implemented, sorry!</b><br>
        The virhus.play() method is used to stop <b>the current</b> interactive stream from the server. After invoking this method, this class will emit 'close', be sure to create callbacks to these functions.
        <pre>
        </pre>
        <pre class="code">
    if(virhus.isConnected()){
      virhus.stop();
    }
        </pre>
      </div>

      <br>
      <h2>virhus.whoami()</h2>
      <div>
        The virhus.whoami() method is used to ask the server for authenticated details.
        <pre>
          <i class="fas fa-circle"></i> Prompts alert("Hi "+response.id);
        </pre>
        <pre class="code">
    if(virhus.isConnected()){
      virhus.whoami();
    }
        </pre>
      </div>





      </div>
      <!-- /.container-fluid -->

      <!-- Sticky Footer -->
      <footer class="sticky-footer">
        <div class="container my-auto">
          <div class="copyright text-center my-auto">
            <span>Copyright Â© Your Website 2019</span>
          </div>
        </div>
      </footer>

    </div>
    <!-- /.content-wrapper -->

  </div>
  <!-- /#wrapper -->

  <!-- Scroll to Top Button-->
  <a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
  </a>

  <!-- Logout Modal-->
  <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
          <button class="close" type="button" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">Ã</span>
          </button>
        </div>
        <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
        <div class="modal-footer">
          <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
          <a class="btn btn-primary" href="login.html">Logout</a>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap core JavaScript-->
  <script src="vendor/jquery/jquery.min.js"></script>
  <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

  <!-- Core plugin JavaScript-->
  <script src="vendor/jquery-easing/jquery.easing.min.js"></script>

  <!-- Custom scripts for all pages-->
  <script src="js/sb-admin.min.js"></script>

</body>

</html>
